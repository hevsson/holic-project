/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { fromEventPattern } from 'rxjs';
import { pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * A service to set the favicon.
 */
var AngularFaviconService = /** @class */ (function () {
    function AngularFaviconService(_doc) {
        var _this = this;
        this._doc = _doc;
        this.darkScheme = '(prefers-color-scheme:dark)';
        this.prefersColorScheme$ = fromEventPattern((/**
         * @param {?} handler
         * @return {?}
         */
        function (handler) { return window.matchMedia(_this.darkScheme).addListener((/** @type {?} */ (handler))); })).pipe(pluck('matches'));
    }
    /**
     * Get the favicon of the current HTML document.
     */
    /**
     * Get the favicon of the current HTML document.
     * @return {?}
     */
    AngularFaviconService.prototype.getFavicon = /**
     * Get the favicon of the current HTML document.
     * @return {?}
     */
    function () {
        return getDOM().querySelector(this._doc, "link[rel*='icon']");
    };
    /**
     * Set the title of the current HTML document.
     * @param iconURL - Default favicon URL
     * @param altIconURL - Optional, dark theme favicon URL
     */
    /**
     * Set the title of the current HTML document.
     * @param {?} iconURL - Default favicon URL
     * @param {?=} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    AngularFaviconService.prototype.setFavicon = /**
     * Set the title of the current HTML document.
     * @param {?} iconURL - Default favicon URL
     * @param {?=} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    function (iconURL, altIconURL) {
        /** @type {?} */
        var link = this.getFavicon() || getDOM().createElement('link');
        /** @type {?} */
        var currentLinkHref = iconURL;
        if (altIconURL) {
            this.subscribeToChangesInTheme(link, iconURL, altIconURL);
            if (window.matchMedia(this.darkScheme).matches) {
                currentLinkHref = altIconURL;
            }
        }
        this.appendLinkTag(link, currentLinkHref);
    };
    /**
     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon
     * @param link - DOM element
     * @param iconURL - Default favicon URL
     * @param altIconURL - Optional, dark theme favicon URL
     */
    /**
     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - Default favicon URL
     * @param {?} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    AngularFaviconService.prototype.subscribeToChangesInTheme = /**
     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - Default favicon URL
     * @param {?} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    function (link, iconURL, altIconURL) {
        var _this = this;
        this.subscriptionToColorScheme = this.prefersColorScheme$.subscribe((/**
         * @param {?} isDarkTheme
         * @return {?}
         */
        function (isDarkTheme) {
            if (isDarkTheme) {
                _this.appendLinkTag(link, altIconURL);
            }
            else {
                _this.appendLinkTag(link, iconURL);
            }
        }));
    };
    /**
     * Append new link to HEAD
     * @param link - DOM element
     * @param iconURL - favicon URL
     */
    /**
     * Append new link to HEAD
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - favicon URL
     * @return {?}
     */
    AngularFaviconService.prototype.appendLinkTag = /**
     * Append new link to HEAD
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - favicon URL
     * @return {?}
     */
    function (link, iconURL) {
        link.type = 'image/x-icon';
        link.rel = 'shortcut icon';
        link.href = iconURL;
        getDOM()
            .getElementsByTagName(this._doc, 'head')[0]
            .appendChild(link);
    };
    /**
     * @return {?}
     */
    AngularFaviconService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptionToColorScheme.unsubscribe();
    };
    AngularFaviconService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AngularFaviconService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ AngularFaviconService.ngInjectableDef = i0.defineInjectable({ factory: function AngularFaviconService_Factory() { return new AngularFaviconService(i0.inject(i1.DOCUMENT)); }, token: AngularFaviconService, providedIn: "root" });
    return AngularFaviconService;
}());
export { AngularFaviconService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.darkScheme;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.subscriptionToColorScheme;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.prefersColorScheme$;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype._doc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1mYXZpY29uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWZhdmljb24vIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci1mYXZpY29uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDdEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFLdkM7SUFJRSwrQkFBc0MsSUFBUztRQUEvQyxpQkFBbUQ7UUFBYixTQUFJLEdBQUosSUFBSSxDQUFLO1FBRXZDLGVBQVUsR0FBRyw2QkFBNkIsQ0FBQztRQUUzQyx3QkFBbUIsR0FBRyxnQkFBZ0I7Ozs7UUFBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxtQkFBQSxPQUFPLEVBQWlCLENBQUMsRUFBeEUsQ0FBd0UsRUFBQyxDQUFDLElBQUksQ0FDdEksS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUNqQixDQUFDO0lBTmdELENBQUM7SUFRbkQ7O09BRUc7Ozs7O0lBQ0gsMENBQVU7Ozs7SUFBVjtRQUNFLE9BQU8sTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNILDBDQUFVOzs7Ozs7SUFBVixVQUFXLE9BQWUsRUFBRSxVQUFtQjs7WUFDdkMsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxNQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDOztZQUM1RCxlQUFlLEdBQUcsT0FBTztRQUU3QixJQUFJLFVBQVUsRUFBRTtZQUNkLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRTFELElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxFQUFFO2dCQUM5QyxlQUFlLEdBQUcsVUFBVSxDQUFDO2FBQzlCO1NBQ0Y7UUFFRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7OztJQUNLLHlEQUF5Qjs7Ozs7Ozs7SUFBakMsVUFBa0MsSUFBUyxFQUFFLE9BQWUsRUFBRSxVQUFrQjtRQUFoRixpQkFRQztRQVBDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsV0FBVztZQUM3RSxJQUFJLFdBQVcsRUFBRTtnQkFDZixLQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQzthQUN0QztpQkFBTTtnQkFDTCxLQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNuQztRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7O0lBQ0ssNkNBQWE7Ozs7Ozs7SUFBckIsVUFBc0IsSUFBUyxFQUFFLE9BQWU7UUFDOUMsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxlQUFlLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7UUFDcEIsTUFBTSxFQUFFO2FBQ0wsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDMUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCwyQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0MsQ0FBQzs7Z0JBdkVGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0RBRWMsTUFBTSxTQUFDLFFBQVE7OztnQ0FiOUI7Q0FpRkMsQUF4RUQsSUF3RUM7U0FyRVkscUJBQXFCOzs7Ozs7SUFHaEMsMkNBQW1EOzs7OztJQUNuRCwwREFBZ0Q7Ozs7O0lBQ2hELG9EQUVFOzs7OztJQU5VLHFDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyDJtWdldERPTSBhcyBnZXRET00gfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IGZyb21FdmVudFBhdHRlcm4sIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgcGx1Y2sgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogQSBzZXJ2aWNlIHRvIHNldCB0aGUgZmF2aWNvbi5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZhdmljb25TZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBfZG9jOiBhbnkpIHt9XG5cbiAgcHJpdmF0ZSBkYXJrU2NoZW1lID0gJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTpkYXJrKSc7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uVG9Db2xvclNjaGVtZTogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIHByZWZlcnNDb2xvclNjaGVtZSQgPSBmcm9tRXZlbnRQYXR0ZXJuKGhhbmRsZXIgPT4gd2luZG93Lm1hdGNoTWVkaWEodGhpcy5kYXJrU2NoZW1lKS5hZGRMaXN0ZW5lcihoYW5kbGVyIGFzIEV2ZW50TGlzdGVuZXIpKS5waXBlKFxuICAgIHBsdWNrKCdtYXRjaGVzJylcbiAgKTtcblxuICAvKipcbiAgICogR2V0IHRoZSBmYXZpY29uIG9mIHRoZSBjdXJyZW50IEhUTUwgZG9jdW1lbnQuXG4gICAqL1xuICBnZXRGYXZpY29uKCkge1xuICAgIHJldHVybiBnZXRET00oKS5xdWVyeVNlbGVjdG9yKHRoaXMuX2RvYywgXCJsaW5rW3JlbCo9J2ljb24nXVwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRpdGxlIG9mIHRoZSBjdXJyZW50IEhUTUwgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSBpY29uVVJMIC0gRGVmYXVsdCBmYXZpY29uIFVSTFxuICAgKiBAcGFyYW0gYWx0SWNvblVSTCAtIE9wdGlvbmFsLCBkYXJrIHRoZW1lIGZhdmljb24gVVJMXG4gICAqL1xuICBzZXRGYXZpY29uKGljb25VUkw6IHN0cmluZywgYWx0SWNvblVSTD86IHN0cmluZykge1xuICAgIGNvbnN0IGxpbmsgPSB0aGlzLmdldEZhdmljb24oKSB8fCBnZXRET00oKS5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgbGV0IGN1cnJlbnRMaW5rSHJlZiA9IGljb25VUkw7XG5cbiAgICBpZiAoYWx0SWNvblVSTCkge1xuICAgICAgdGhpcy5zdWJzY3JpYmVUb0NoYW5nZXNJblRoZW1lKGxpbmssIGljb25VUkwsIGFsdEljb25VUkwpO1xuXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEodGhpcy5kYXJrU2NoZW1lKS5tYXRjaGVzKSB7XG4gICAgICAgIGN1cnJlbnRMaW5rSHJlZiA9IGFsdEljb25VUkw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcHBlbmRMaW5rVGFnKGxpbmssIGN1cnJlbnRMaW5rSHJlZik7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSB0aGVtZSBjb2xvciBjaGFuZ2VzIGluIGJyb3dzZXIvT1MgYW5kIGFwcGx5IHRoZSBhcHByb3BpYXRlIGZhdmljb25cbiAgICogQHBhcmFtIGxpbmsgLSBET00gZWxlbWVudFxuICAgKiBAcGFyYW0gaWNvblVSTCAtIERlZmF1bHQgZmF2aWNvbiBVUkxcbiAgICogQHBhcmFtIGFsdEljb25VUkwgLSBPcHRpb25hbCwgZGFyayB0aGVtZSBmYXZpY29uIFVSTFxuICAgKi9cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb0NoYW5nZXNJblRoZW1lKGxpbms6IGFueSwgaWNvblVSTDogc3RyaW5nLCBhbHRJY29uVVJMOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvblRvQ29sb3JTY2hlbWUgPSB0aGlzLnByZWZlcnNDb2xvclNjaGVtZSQuc3Vic2NyaWJlKGlzRGFya1RoZW1lID0+IHtcbiAgICAgIGlmIChpc0RhcmtUaGVtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZExpbmtUYWcobGluaywgYWx0SWNvblVSTCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFwcGVuZExpbmtUYWcobGluaywgaWNvblVSTCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kIG5ldyBsaW5rIHRvIEhFQURcbiAgICogQHBhcmFtIGxpbmsgLSBET00gZWxlbWVudFxuICAgKiBAcGFyYW0gaWNvblVSTCAtIGZhdmljb24gVVJMXG4gICAqL1xuICBwcml2YXRlIGFwcGVuZExpbmtUYWcobGluazogYW55LCBpY29uVVJMOiBzdHJpbmcpIHtcbiAgICBsaW5rLnR5cGUgPSAnaW1hZ2UveC1pY29uJztcbiAgICBsaW5rLnJlbCA9ICdzaG9ydGN1dCBpY29uJztcbiAgICBsaW5rLmhyZWYgPSBpY29uVVJMO1xuICAgIGdldERPTSgpXG4gICAgICAuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGhpcy5fZG9jLCAnaGVhZCcpWzBdXG4gICAgICAuYXBwZW5kQ2hpbGQobGluayk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvblRvQ29sb3JTY2hlbWUudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19