{"version":3,"sources":["ng://angular-favicon/lib/angular-favicon.service.ts"],"names":["AngularFaviconService","prototype","getFavicon","getDOM","querySelector","this","_doc","setFavicon","iconURL","altIconURL","link","createElement","currentLinkHref","subscribeToChangesInTheme","window","matchMedia","darkScheme","matches","appendLinkTag","_this","subscriptionToColorScheme","prefersColorScheme$","subscribe","isDarkTheme","type","rel","href","getElementsByTagName","appendChild","ngOnDestroy","unsubscribe","Injectable","args","providedIn","Inject","DOCUMENT","fromEventPattern","handler","addListener","pipe","pluck"],"mappings":"6fASA,IAAAA,GAeEA,EAAAC,UAAAC,WAAA,WACE,OAAOC,EAAAA,UAASC,cAAcC,KAAKC,KAAM,sBAQ3CN,EAAAC,UAAAM,WAAA,SAAWC,EAAiBC,OACpBC,EAAOL,KAAKH,cAAgBC,EAAAA,UAASQ,cAAc,QACrDC,EAAkBJ,EAElBC,IACFJ,KAAKQ,0BAA0BH,EAAMF,EAASC,GAE1CK,OAAOC,WAAWV,KAAKW,YAAYC,UACrCL,EAAkBH,IAItBJ,KAAKa,cAAcR,EAAME,IASnBZ,EAAAC,UAAAY,0BAAR,SAAkCH,EAAWF,EAAiBC,GAA9D,IAAAU,EAAAd,KACEA,KAAKe,0BAA4Bf,KAAKgB,oBAAoBC,UAAS,SAACC,GAC9DA,EACFJ,EAAKD,cAAcR,EAAMD,GAEzBU,EAAKD,cAAcR,EAAMF,MAUvBR,EAAAC,UAAAiB,cAAR,SAAsBR,EAAWF,GAC/BE,EAAKc,KAAO,eACZd,EAAKe,IAAM,gBACXf,EAAKgB,KAAOlB,EACZL,EAAAA,UACGwB,qBAAqBtB,KAAKC,KAAM,QAAQ,GACxCsB,YAAYlB,IAGjBV,EAAAC,UAAA4B,YAAA,WACExB,KAAKe,0BAA0BU,mCAtElCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,gFAGCC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,2IAApB,SAAAnC,EAAsCM,GAAtC,IAAAa,EAAAd,KAAsCA,KAAAC,KAAAA,EAE9BD,KAAAW,WAAa,8BAEbX,KAAAgB,oBAAsBe,EAAAA,iBAAgB,SAACC,GAAW,OAAAvB,OAAOC,WAAWI,EAAKH,YAAYsB,YAAW,KAA4BC,KAClIC,EAAAA,MAAM","sourcesContent":["import { Injectable, Inject, OnDestroy } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { fromEventPattern, Subscription } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\n\n/**\n * A service to set the favicon.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularFaviconService implements OnDestroy {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n\n  private darkScheme = '(prefers-color-scheme:dark)';\n  private subscriptionToColorScheme: Subscription;\n  private prefersColorScheme$ = fromEventPattern(handler => window.matchMedia(this.darkScheme).addListener(handler as EventListener)).pipe(\n    pluck('matches')\n  );\n\n  /**\n   * Get the favicon of the current HTML document.\n   */\n  getFavicon() {\n    return getDOM().querySelector(this._doc, \"link[rel*='icon']\");\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param iconURL - Default favicon URL\n   * @param altIconURL - Optional, dark theme favicon URL\n   */\n  setFavicon(iconURL: string, altIconURL?: string) {\n    const link = this.getFavicon() || getDOM().createElement('link');\n    let currentLinkHref = iconURL;\n\n    if (altIconURL) {\n      this.subscribeToChangesInTheme(link, iconURL, altIconURL);\n\n      if (window.matchMedia(this.darkScheme).matches) {\n        currentLinkHref = altIconURL;\n      }\n    }\n\n    this.appendLinkTag(link, currentLinkHref);\n  }\n\n  /**\n   * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon\n   * @param link - DOM element\n   * @param iconURL - Default favicon URL\n   * @param altIconURL - Optional, dark theme favicon URL\n   */\n  private subscribeToChangesInTheme(link: any, iconURL: string, altIconURL: string) {\n    this.subscriptionToColorScheme = this.prefersColorScheme$.subscribe(isDarkTheme => {\n      if (isDarkTheme) {\n        this.appendLinkTag(link, altIconURL);\n      } else {\n        this.appendLinkTag(link, iconURL);\n      }\n    });\n  }\n\n  /**\n   * Append new link to HEAD\n   * @param link - DOM element\n   * @param iconURL - favicon URL\n   */\n  private appendLinkTag(link: any, iconURL: string) {\n    link.type = 'image/x-icon';\n    link.rel = 'shortcut icon';\n    link.href = iconURL;\n    getDOM()\n      .getElementsByTagName(this._doc, 'head')[0]\n      .appendChild(link);\n  }\n\n  ngOnDestroy() {\n    this.subscriptionToColorScheme.unsubscribe();\n  }\n}\n"]}