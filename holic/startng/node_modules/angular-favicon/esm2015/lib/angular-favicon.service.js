/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { fromEventPattern } from 'rxjs';
import { pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * A service to set the favicon.
 */
export class AngularFaviconService {
    /**
     * @param {?} _doc
     */
    constructor(_doc) {
        this._doc = _doc;
        this.darkScheme = '(prefers-color-scheme:dark)';
        this.prefersColorScheme$ = fromEventPattern((/**
         * @param {?} handler
         * @return {?}
         */
        handler => window.matchMedia(this.darkScheme).addListener((/** @type {?} */ (handler))))).pipe(pluck('matches'));
    }
    /**
     * Get the favicon of the current HTML document.
     * @return {?}
     */
    getFavicon() {
        return getDOM().querySelector(this._doc, "link[rel*='icon']");
    }
    /**
     * Set the title of the current HTML document.
     * @param {?} iconURL - Default favicon URL
     * @param {?=} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    setFavicon(iconURL, altIconURL) {
        /** @type {?} */
        const link = this.getFavicon() || getDOM().createElement('link');
        /** @type {?} */
        let currentLinkHref = iconURL;
        if (altIconURL) {
            this.subscribeToChangesInTheme(link, iconURL, altIconURL);
            if (window.matchMedia(this.darkScheme).matches) {
                currentLinkHref = altIconURL;
            }
        }
        this.appendLinkTag(link, currentLinkHref);
    }
    /**
     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - Default favicon URL
     * @param {?} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    subscribeToChangesInTheme(link, iconURL, altIconURL) {
        this.subscriptionToColorScheme = this.prefersColorScheme$.subscribe((/**
         * @param {?} isDarkTheme
         * @return {?}
         */
        isDarkTheme => {
            if (isDarkTheme) {
                this.appendLinkTag(link, altIconURL);
            }
            else {
                this.appendLinkTag(link, iconURL);
            }
        }));
    }
    /**
     * Append new link to HEAD
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - favicon URL
     * @return {?}
     */
    appendLinkTag(link, iconURL) {
        link.type = 'image/x-icon';
        link.rel = 'shortcut icon';
        link.href = iconURL;
        getDOM()
            .getElementsByTagName(this._doc, 'head')[0]
            .appendChild(link);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptionToColorScheme.unsubscribe();
    }
}
AngularFaviconService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AngularFaviconService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ AngularFaviconService.ngInjectableDef = i0.defineInjectable({ factory: function AngularFaviconService_Factory() { return new AngularFaviconService(i0.inject(i1.DOCUMENT)); }, token: AngularFaviconService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.darkScheme;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.subscriptionToColorScheme;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.prefersColorScheme$;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype._doc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1mYXZpY29uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWZhdmljb24vIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci1mYXZpY29uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDdEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFRdkMsTUFBTSxPQUFPLHFCQUFxQjs7OztJQUNoQyxZQUFzQyxJQUFTO1FBQVQsU0FBSSxHQUFKLElBQUksQ0FBSztRQUV2QyxlQUFVLEdBQUcsNkJBQTZCLENBQUM7UUFFM0Msd0JBQW1CLEdBQUcsZ0JBQWdCOzs7O1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsbUJBQUEsT0FBTyxFQUFpQixDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQ3RJLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FDakIsQ0FBQztJQU5nRCxDQUFDOzs7OztJQVduRCxVQUFVO1FBQ1IsT0FBTyxNQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7Ozs7SUFPRCxVQUFVLENBQUMsT0FBZSxFQUFFLFVBQW1COztjQUN2QyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7O1lBQzVELGVBQWUsR0FBRyxPQUFPO1FBRTdCLElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFMUQsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEVBQUU7Z0JBQzlDLGVBQWUsR0FBRyxVQUFVLENBQUM7YUFDOUI7U0FDRjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7Ozs7OztJQVFPLHlCQUF5QixDQUFDLElBQVMsRUFBRSxPQUFlLEVBQUUsVUFBa0I7UUFDOUUsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTOzs7O1FBQUMsV0FBVyxDQUFDLEVBQUU7WUFDaEYsSUFBSSxXQUFXLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDdEM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDbkM7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7O0lBT08sYUFBYSxDQUFDLElBQVMsRUFBRSxPQUFlO1FBQzlDLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsZUFBZSxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQ3BCLE1BQU0sRUFBRTthQUNMLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQyxDQUFDOzs7WUF2RUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OzRDQUVjLE1BQU0sU0FBQyxRQUFROzs7Ozs7OztJQUU1QiwyQ0FBbUQ7Ozs7O0lBQ25ELDBEQUFnRDs7Ozs7SUFDaEQsb0RBRUU7Ozs7O0lBTlUscUNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IMm1Z2V0RE9NIGFzIGdldERPTSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgZnJvbUV2ZW50UGF0dGVybiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBwbHVjayB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBBIHNlcnZpY2UgdG8gc2V0IHRoZSBmYXZpY29uLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFyRmF2aWNvblNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIF9kb2M6IGFueSkge31cblxuICBwcml2YXRlIGRhcmtTY2hlbWUgPSAnKHByZWZlcnMtY29sb3Itc2NoZW1lOmRhcmspJztcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25Ub0NvbG9yU2NoZW1lOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgcHJlZmVyc0NvbG9yU2NoZW1lJCA9IGZyb21FdmVudFBhdHRlcm4oaGFuZGxlciA9PiB3aW5kb3cubWF0Y2hNZWRpYSh0aGlzLmRhcmtTY2hlbWUpLmFkZExpc3RlbmVyKGhhbmRsZXIgYXMgRXZlbnRMaXN0ZW5lcikpLnBpcGUoXG4gICAgcGx1Y2soJ21hdGNoZXMnKVxuICApO1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZhdmljb24gb2YgdGhlIGN1cnJlbnQgSFRNTCBkb2N1bWVudC5cbiAgICovXG4gIGdldEZhdmljb24oKSB7XG4gICAgcmV0dXJuIGdldERPTSgpLnF1ZXJ5U2VsZWN0b3IodGhpcy5fZG9jLCBcImxpbmtbcmVsKj0naWNvbiddXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdGl0bGUgb2YgdGhlIGN1cnJlbnQgSFRNTCBkb2N1bWVudC5cbiAgICogQHBhcmFtIGljb25VUkwgLSBEZWZhdWx0IGZhdmljb24gVVJMXG4gICAqIEBwYXJhbSBhbHRJY29uVVJMIC0gT3B0aW9uYWwsIGRhcmsgdGhlbWUgZmF2aWNvbiBVUkxcbiAgICovXG4gIHNldEZhdmljb24oaWNvblVSTDogc3RyaW5nLCBhbHRJY29uVVJMPzogc3RyaW5nKSB7XG4gICAgY29uc3QgbGluayA9IHRoaXMuZ2V0RmF2aWNvbigpIHx8IGdldERPTSgpLmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICBsZXQgY3VycmVudExpbmtIcmVmID0gaWNvblVSTDtcblxuICAgIGlmIChhbHRJY29uVVJMKSB7XG4gICAgICB0aGlzLnN1YnNjcmliZVRvQ2hhbmdlc0luVGhlbWUobGluaywgaWNvblVSTCwgYWx0SWNvblVSTCk7XG5cbiAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSh0aGlzLmRhcmtTY2hlbWUpLm1hdGNoZXMpIHtcbiAgICAgICAgY3VycmVudExpbmtIcmVmID0gYWx0SWNvblVSTDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFwcGVuZExpbmtUYWcobGluaywgY3VycmVudExpbmtIcmVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIHRoZW1lIGNvbG9yIGNoYW5nZXMgaW4gYnJvd3Nlci9PUyBhbmQgYXBwbHkgdGhlIGFwcHJvcGlhdGUgZmF2aWNvblxuICAgKiBAcGFyYW0gbGluayAtIERPTSBlbGVtZW50XG4gICAqIEBwYXJhbSBpY29uVVJMIC0gRGVmYXVsdCBmYXZpY29uIFVSTFxuICAgKiBAcGFyYW0gYWx0SWNvblVSTCAtIE9wdGlvbmFsLCBkYXJrIHRoZW1lIGZhdmljb24gVVJMXG4gICAqL1xuICBwcml2YXRlIHN1YnNjcmliZVRvQ2hhbmdlc0luVGhlbWUobGluazogYW55LCBpY29uVVJMOiBzdHJpbmcsIGFsdEljb25VUkw6IHN0cmluZykge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uVG9Db2xvclNjaGVtZSA9IHRoaXMucHJlZmVyc0NvbG9yU2NoZW1lJC5zdWJzY3JpYmUoaXNEYXJrVGhlbWUgPT4ge1xuICAgICAgaWYgKGlzRGFya1RoZW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kTGlua1RhZyhsaW5rLCBhbHRJY29uVVJMKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXBwZW5kTGlua1RhZyhsaW5rLCBpY29uVVJMKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmQgbmV3IGxpbmsgdG8gSEVBRFxuICAgKiBAcGFyYW0gbGluayAtIERPTSBlbGVtZW50XG4gICAqIEBwYXJhbSBpY29uVVJMIC0gZmF2aWNvbiBVUkxcbiAgICovXG4gIHByaXZhdGUgYXBwZW5kTGlua1RhZyhsaW5rOiBhbnksIGljb25VUkw6IHN0cmluZykge1xuICAgIGxpbmsudHlwZSA9ICdpbWFnZS94LWljb24nO1xuICAgIGxpbmsucmVsID0gJ3Nob3J0Y3V0IGljb24nO1xuICAgIGxpbmsuaHJlZiA9IGljb25VUkw7XG4gICAgZ2V0RE9NKClcbiAgICAgIC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0aGlzLl9kb2MsICdoZWFkJylbMF1cbiAgICAgIC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uVG9Db2xvclNjaGVtZS51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=