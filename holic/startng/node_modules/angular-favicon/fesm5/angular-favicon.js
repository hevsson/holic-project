import { Injectable, Inject, defineInjectable, inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ɵgetDOM } from '@angular/platform-browser';
import { fromEventPattern } from 'rxjs';
import { pluck } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A service to set the favicon.
 */
var AngularFaviconService = /** @class */ (function () {
    function AngularFaviconService(_doc) {
        var _this = this;
        this._doc = _doc;
        this.darkScheme = '(prefers-color-scheme:dark)';
        this.prefersColorScheme$ = fromEventPattern((/**
         * @param {?} handler
         * @return {?}
         */
        function (handler) { return window.matchMedia(_this.darkScheme).addListener((/** @type {?} */ (handler))); })).pipe(pluck('matches'));
    }
    /**
     * Get the favicon of the current HTML document.
     */
    /**
     * Get the favicon of the current HTML document.
     * @return {?}
     */
    AngularFaviconService.prototype.getFavicon = /**
     * Get the favicon of the current HTML document.
     * @return {?}
     */
    function () {
        return ɵgetDOM().querySelector(this._doc, "link[rel*='icon']");
    };
    /**
     * Set the title of the current HTML document.
     * @param iconURL - Default favicon URL
     * @param altIconURL - Optional, dark theme favicon URL
     */
    /**
     * Set the title of the current HTML document.
     * @param {?} iconURL - Default favicon URL
     * @param {?=} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    AngularFaviconService.prototype.setFavicon = /**
     * Set the title of the current HTML document.
     * @param {?} iconURL - Default favicon URL
     * @param {?=} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    function (iconURL, altIconURL) {
        /** @type {?} */
        var link = this.getFavicon() || ɵgetDOM().createElement('link');
        /** @type {?} */
        var currentLinkHref = iconURL;
        if (altIconURL) {
            this.subscribeToChangesInTheme(link, iconURL, altIconURL);
            if (window.matchMedia(this.darkScheme).matches) {
                currentLinkHref = altIconURL;
            }
        }
        this.appendLinkTag(link, currentLinkHref);
    };
    /**
     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon
     * @param link - DOM element
     * @param iconURL - Default favicon URL
     * @param altIconURL - Optional, dark theme favicon URL
     */
    /**
     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - Default favicon URL
     * @param {?} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    AngularFaviconService.prototype.subscribeToChangesInTheme = /**
     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - Default favicon URL
     * @param {?} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    function (link, iconURL, altIconURL) {
        var _this = this;
        this.subscriptionToColorScheme = this.prefersColorScheme$.subscribe((/**
         * @param {?} isDarkTheme
         * @return {?}
         */
        function (isDarkTheme) {
            if (isDarkTheme) {
                _this.appendLinkTag(link, altIconURL);
            }
            else {
                _this.appendLinkTag(link, iconURL);
            }
        }));
    };
    /**
     * Append new link to HEAD
     * @param link - DOM element
     * @param iconURL - favicon URL
     */
    /**
     * Append new link to HEAD
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - favicon URL
     * @return {?}
     */
    AngularFaviconService.prototype.appendLinkTag = /**
     * Append new link to HEAD
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - favicon URL
     * @return {?}
     */
    function (link, iconURL) {
        link.type = 'image/x-icon';
        link.rel = 'shortcut icon';
        link.href = iconURL;
        ɵgetDOM()
            .getElementsByTagName(this._doc, 'head')[0]
            .appendChild(link);
    };
    /**
     * @return {?}
     */
    AngularFaviconService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptionToColorScheme.unsubscribe();
    };
    AngularFaviconService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AngularFaviconService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ AngularFaviconService.ngInjectableDef = defineInjectable({ factory: function AngularFaviconService_Factory() { return new AngularFaviconService(inject(DOCUMENT)); }, token: AngularFaviconService, providedIn: "root" });
    return AngularFaviconService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularFaviconService };

//# sourceMappingURL=angular-favicon.js.map